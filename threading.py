'''Потоки (threads) в Python — это механизм, который позволяет выполнять несколько задач одновременно в рамках одного
процесса. Это полезно, когда нужно выполнять несколько операций параллельно, например, обрабатывать данные,
работать с сетью или выполнять вычисления.

Основные понятия о потоках
Поток (Thread) — это отдельный поток выполнения в программе. У каждого потока есть свой стек вызовов, но все потоки
внутри одного процесса разделяют общую память.

Глобальная блокировка интерпретатора (GIL) — в Python существует GIL, который предотвращает выполнение нескольких
потоков на уровне байт-кода одновременно. Это означает, что в Python потоки не могут использовать несколько ядер
процессора для выполнения CPU-bound задач (например, вычислений).
Однако они полезны для I/O-bound задач (например, работы с сетью или файлами).

Модуль threading — стандартный модуль Python для работы с потоками.

Пример использования потоков
Рассмотрим простой пример, где два потока выполняются параллельно:
'''



import threading
import time

def worker(name):
    print(f"Поток {name} начал работу")
    time.sleep(2)  # Имитация долгой операции
    print(f"Поток {name} завершил работу")

# Создаем два потока
thread1 = threading.Thread(target=worker, args=("Первый",))
thread2 = threading.Thread(target=worker, args=("Второй",))

# Запускаем потоки
thread1.start()
thread2.start()

# Ждем завершения потоков
thread1.join()
thread2.join()

print("Все потоки завершили выполнение")

'''Объяснение кода:
threading.Thread — создает новый поток. В аргументе target указывается функция, которую будет выполнять поток, 
а в args — аргументы для этой функции.

start() — запускает поток. После вызова этого метода поток начинает выполнение функции, указанной в target.

join() — блокирует выполнение основного потока до тех пор, пока целевой поток не завершится. Это полезно, 
чтобы дождаться завершения всех потоков перед продолжением выполнения основной программы.

Когда использовать потоки
Потоки полезны в следующих случаях:

I/O-bound задачи: работа с файлами, сетью, базами данных, где много времени тратится на ожидание.

Параллельное выполнение задач: например, одновременная загрузка нескольких файлов или обработка нескольких запросов.

Ограничения потоков в Python
GIL: из-за GIL потоки в Python не подходят для CPU-bound задач (например, сложных вычислений), так как они не могут 
выполняться одновременно на нескольких ядрах процессора. Для таких задач лучше использовать многопроцессорность 
(модуль multiprocessing).

Сложность синхронизации: при работе с потоками нужно быть осторожным с доступом к общим ресурсам, чтобы избежать 
состояний гонки (race conditions). Для синхронизации можно использовать блокировки (threading.Lock).'''

#Пример с блокировкой

import threading

counter = 0
lock = threading.Lock()

def increment():
    global counter
    for _ in range(100000):
        with lock:
            counter += 1

threads = []
for i in range(10):
    thread = threading.Thread(target=increment)
    threads.append(thread)
    thread.start()

for thread in threads:
    thread.join()

print(f"Итоговое значение счетчика: {counter}")

"""В этом примере используется блокировка (lock), чтобы избежать состояния гонки при изменении общей переменной counter.

Заключение
Потоки в Python — это мощный инструмент для выполнения задач параллельно, особенно когда речь идет о I/O-bound 
операциях. Однако из-за GIL они не подходят для CPU-bound задач, и в таких случаях лучше использовать 
многопроцессорность. 
Также важно помнить о синхронизации при работе с общими ресурсами."""